<!DOCTYPE html>
<html>
  <head>
    <title>Geolocation</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      html, body, #map-canvas {
        height: 100%;
        margin: 0px;
        padding: 0px
      }
    </style>
    
    <script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?sensor=true&libraries=places,visualization&v=3.exp"></script>
    <script type='application/javascript'>
		var map;
		var homePos;
		var storesShown = false, hospitalsShown = false;
		var service, infoWindow;
		var stores = [], hospitals = [];
		var storesControl; 
		var hospitalsControl;
		var demoMode = true;
		var tooltip;

		function initialize() {
			var mapContainer = document.getElementById('map-canvas');
			var mapOptions = {
				zoom: 8,
				center: new google.maps.LatLng(30.5, -89)
			};
			map = new google.maps.Map(mapContainer, mapOptions);

			infoWindow = new google.maps.InfoWindow();
			service = new google.maps.places.PlacesService(map);

			// if geolocation available, add home control:
			if(navigator.geolocation){
				var homeControlDiv = document.createElement('div');
				var homeControl = new Control(
					"Home", "Click to center the map around your location", 
					homeControlDiv, map, function(){
						getHomeLocation(demoMode);
					});
				homeControlDiv.index = 3;
				map.controls[google.maps.ControlPosition.TOP_RIGHT].push(homeControlDiv);
			}

			// add 'Toggle Nearby Stores' control:
			var storesControlDiv = document.createElement('div');
			storesControl = new Control(
				"Grocery/Produce", "Toggle Nearby Grocery and Produce",
				storesControlDiv, map, toggleStores);
			storesControl.toggleOpacity();
			storesControlDiv.index = 10;
			map.controls[google.maps.ControlPosition.TOP_RIGHT].push(storesControlDiv);

			// add 'Toggle Nearby Hospitals' control:
			var hospitalsControlDiv = document.createElement('div');
			hospitalsControl = new Control(
				"Hospitals", "Toggle Nearby Hospitals",
				hospitalsControlDiv, map, toggleHospitals);
			hospitalsControl.toggleOpacity();
			hospitalsControlDiv.index = 10;
			map.controls[google.maps.ControlPosition.TOP_RIGHT].push(hospitalsControlDiv);

/*<<<<<<< HEAD
			// Load Tract GeoJSON data:
			map.data.loadGeoJson('/map_layers/1.json');
=======*/
			// add 'Show Alabama' control:
			var alabamaControlDiv = document.createElement('div');
			var alabamaControl = new Control(
				"AL", "Click to Alabama Census Tracts",
				alabamaControlDiv, map, function(){
					toggleCensusTracts('al');
				});
			alabamaControlDiv.index = 10;
			map.controls[google.maps.ControlPosition.TOP_LEFT].push(alabamaControlDiv);

			// add 'Show Florida' control:
			var floridaControlDiv = document.createElement('div');
			var floridaControl = new Control(
				"FL", "Click to Toggle Florida Census Tracts",
				floridaControlDiv, map, function(){
					toggleCensusTracts('fl');
				});
			floridaControlDiv.index = 10;
			map.controls[google.maps.ControlPosition.TOP_LEFT].push(floridaControlDiv);

			// add 'Show Louisiana' control:
			var louisianaControlDiv = document.createElement('div');
			var louisianaControl = new Control(
				"LA", "Click to Toggle Louisana Census Tracts",
				louisianaControlDiv, map, function(){
					toggleCensusTracts('la');
				});
			louisianaControlDiv.index = 10;
			map.controls[google.maps.ControlPosition.TOP_LEFT].push(louisianaControlDiv);

			// add 'Show Mississippi' control:
			var mississippiControlDiv = document.createElement('div');
			var mississippiControl = new Control(
				"MS", "Click to Toggle Mississippi",
				mississippiControlDiv, map, function(){
					toggleCensusTracts('ms');
				});
			mississippiControlDiv.index = 10;
			map.controls[google.maps.ControlPosition.TOP_LEFT].push(mississippiControlDiv);

			map.data.addListener('mouseover', function(event) {

				var some_lat = event.feature.getProperty('center').lat
				var some_lng = event.feature.getProperty('center').lng
				
				if (infoWindow) {
					infoWindow.close();
				}
				infoWindow = new google.maps.InfoWindow({
					position: new google.maps.LatLng(some_lng, some_lat),
					content: event.feature.getProperty('lalits')*100 + "% lives more than " + event.feature.getProperty('distance') + " miles from fresh food."
				});
				infoWindow.open(map);
			});
			map.data.addListener('click', function(event) {
				toggleStores(event.feature.getProperty("sw"), event.feature.getProperty("ne"));
			});
		}

		google.maps.event.addDomListener(window, 'load', initialize);

		function toggleCensusTracts(state){
			map.data.loadGeoJson('/map_layers/' + state + '.json');
/*>>>>>>> 4bc3c2a79ed791c70267fe3fb7e5a6ab5c93e30f*/
			map.data.setStyle(function(feature) {
				var lalits = feature.getProperty('lalits');
				var R  = 'FF'
				var GB = 'FFFF'
				if (lalits < .05){
					GB = 'DDDD'
				} else if (lalits < .10){
					GB = 'BBBB'
				} else if (lalits < .15){
					GB = 'AAAA'
				} else if (lalits < .20){
					GB = '8888'
				} else if (lalits < .25){
					GB = '6666'
				} else if (lalits < .30){
					GB = '4444'
				} else if (lalits < .35){
					GB = '2222'
				} else if (lalits < .40){
					GB = '0000'
				} else if (lalits < .45){
					GB = '0000'; R = 'EE';
				} else if (lalits < .50){
					GB = '5555'; R = 'DD';
				} else if (lalits < .55){
					GB = '4444'; R = 'CC';
				} else if (lalits < .60){
					GB = '3333'; R = 'BB';
				} else if (lalits < .65){
					GB = '2222'; R = 'AA';
				} else if (lalits < .70){
					GB = '1111'; R = 'AA';
				} else if (lalits < .75){
					GB = '0000'; R = 'AA';
				}
				var rgb = '#' + R + GB;
				return {
					fillColor: rgb,
					fillOpacity: 0.8,
					strokeWeight: 0.5,
					clickable: true
				};
			});
// <<<<<<< HEAD
			
			map.data.addListener('mouseover', function(event) {
				// document.getElementById('info-box').textContent = event.feature.getProperty('lalits') + "% of people are at least " + event.feature.getProperty('distance') + " miles away.";
				//console.log('moused over!');
			});
			map.data.addListener('click', function(event) {
				var sw = event.feature.getProperty("sw");
				var ne = event.feature.getProperty("ne");
				displayStores(sw, ne);
				displayHospitals(sw, ne);
			});
// =======
// >>>>>>> 4bc3c2a79ed791c70267fe3fb7e5a6ab5c93e30f
		}

		// toggles 'Nearby Stores' layer inside a tract or the entire map:
		// 'tract' can be a GeoJSON Property with .sw and .ne properties
		// or set to false to use entire map
		function toggleStores(){
			// toggle on/off:
			storesControl.toggleOpacity();
			if(storesShown){ 
				storesShown = false;
				clearStores();
			} else {
				storesShown = true;
				displayStores();
			}
		}

		// displays stores, based on given sw/ne 
		// or global viewport bounds:
		function displayStores(sw, ne){
			if(storesShown){
				clearStores();
				var request = {
					bounds: ((sw && ne) 
						? new google.maps.LatLngBounds(
							new google.maps.LatLng(sw.lat, sw.lng), 
							new google.maps.LatLng(ne.lat, ne.lng))
						: map.getBounds()),
					keyword: 'grocery produce',
				};
				service.radarSearch(request, processStoreJSON);
			}
		}

		function clearStores(){
			for(var i=0; i<stores.length; i++){
				stores[i].setMap(null);
			}
			stores = [];
		}
		
		function processStoreJSON(results, status) {
			if (status != google.maps.places.PlacesServiceStatus.OK) {
				//alert(status);
				return;
			}
			for (var i = 0, result; result = results[i]; i++) {
				stores.push(createMarker(result, "assets/reddot.png"));
			}
		}

		// toggles 'Nearby Hospitals' layer:
		function toggleHospitals(){
			hospitalsControl.toggleOpacity();
			if(hospitalsShown){
				hospitalsShown = false;
				clearHospitals();
			} else {
				hospitalsShown = true;
				displayHospitals();
			}
		}

		function displayHospitals(sw, ne){
			if(hospitalsShown){
				clearHospitals();
				var request = {
					bounds: ((sw && ne) 
						? new google.maps.LatLngBounds(
							new google.maps.LatLng(sw.lat, sw.lng), 
							new google.maps.LatLng(ne.lat, ne.lng))
						: map.getBounds()),
					keyword: 'hospital',
				};
				service.radarSearch(request, processHospitalJSON);
			}
		}

		function clearHospitals(){
			for(var i=0; i<hospitals.length; i++){
				hospitals[i].setMap(null);
			}
			hospitals = [];
		}

		function processHospitalJSON(results, status) {
			if (status != google.maps.places.PlacesServiceStatus.OK) {
				alert(status);
				return;
			}
			for (var i = 0, result; result = results[i]; i++) {
				hospitals.push(createMarker(result, "assets/bluedot.png"));
			}
		}

		function createMarker(place, iconPath) {
			var marker = new google.maps.Marker({
				map: map,
				position: place.geometry.location,
				icon : iconPath
			});
			google.maps.event.addListener(marker, 'click', function() {
				service.getDetails(place, function(result, status) {
					if (status != google.maps.places.PlacesServiceStatus.OK) {
						//alert(status);
						return;
					}
					
					infoWindow.setContent(result.name);
					infoWindow.open(map, marker);
				});
			});
			return marker;
		}

		// attempts to retrieve user's home location:
		function getHomeLocation(demoMode){
			if(demoMode)
				homePos = new google.maps.LatLng(29.5, -89);
			else if(!homePos){
				navigator.geolocation.getCurrentPosition(function(position) {
					homePos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
					map.setCenter(homePos);
				}, function() {
					handleNoGeolocation(true);
				});
			} else {
				map.setCenter(homePos);
			}
		}

		function handleNoGeolocation(errorFlag) {
			if (errorFlag) {
				var content = 'Error: The Geolocation service failed.';
			} else {
				var content = 'Error: Your browser doesn\'t support geolocation.';
			}

			var options = {
				map: map,
				position: new google.maps.LatLng(30, -89),
				content: content
			};

			var infowindow = new google.maps.InfoWindow(options);
			map.setCenter(options.position);
		}

		// A constructor for custom map controls:
		function Control(label, title, controlDiv, map, clickHandler){
			controlDiv.style.padding = '5px';

			this.controlUI = document.createElement('div');
			this.controlUI.style.backgroundColor = '#00d2ff';
			this.controlUI.style.borderStyle = 'solid';
			this.controlUI.style.borderWidth = '.5px';
			this.controlUI.style.cursor = 'pointer';
			this.controlUI.style.textAlign = 'center';
			this.controlUI.style.opacity = 1;
			this.controlUI.title = title;
			controlDiv.appendChild(this.controlUI);

			// Set CSS for the control interior.
			var controlText = document.createElement('div');
			controlText.style.fontFamily = 'Arial,sans-serif';
			controlText.style.fontSize = '16px';
			controlText.style.color = 'white';
			controlText.style.paddingLeft = '15px';
			controlText.style.paddingRight = '15px';
			controlText.style.paddingTop = '7px';
			controlText.style.paddingBottom = '7px';
			controlText.innerHTML = '<strong>'+label+'</strong>';
			this.controlUI.appendChild(controlText);

			this.toggleOpacity = function(){
				if(this.controlUI.style.opacity == 1)
					this.controlUI.style.opacity = .3;
				else 
					this.controlUI.style.opacity = 1;
			}

			// Setup the click event listener:
			google.maps.event.addDomListener(this.controlUI, 'click', clickHandler);
		}
    </script>
  </head>
  <body>
    <div id="map-canvas"></div>
  </body>
</html>
